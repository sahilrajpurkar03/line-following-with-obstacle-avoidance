
Fire_bird_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000728  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000016  00800200  00800200  00000728  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000728  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000758  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000153d  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2b  00000000  00000000  00001d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089e  00000000  00000000  00002ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000174  00000000  00000000  00003358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006a3  00000000  00000000  000034cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000763  00000000  00000000  00003b6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000042d2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	79 c0       	rjmp	.+242    	; 0x108 <__bad_interrupt>
  16:	00 00       	nop
  18:	77 c0       	rjmp	.+238    	; 0x108 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	1d c0       	rjmp	.+58     	; 0x108 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a6 31       	cpi	r26, 0x16	; 22
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	a7 d2       	rcall	.+1358   	; 0x654 <main>
 106:	d4 c2       	rjmp	.+1448   	; 0x6b0 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <init_ports>:
	while(*str != '\0')
	{
		lcd_wr_char(*str);
		str++;
	}
}
 10a:	87 b1       	in	r24, 0x07	; 7
 10c:	87 6f       	ori	r24, 0xF7	; 247
 10e:	87 b9       	out	0x07, r24	; 7
 110:	88 b1       	in	r24, 0x08	; 8
 112:	80 78       	andi	r24, 0x80	; 128
 114:	88 b9       	out	0x08, r24	; 8
 116:	08 95       	ret

00000118 <lcd_set_4bit>:
 118:	86 e6       	ldi	r24, 0x66	; 102
 11a:	9e e0       	ldi	r25, 0x0E	; 14
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_set_4bit+0x4>
 120:	00 00       	nop
 122:	40 98       	cbi	0x08, 0	; 8
 124:	41 98       	cbi	0x08, 1	; 8
 126:	80 e3       	ldi	r24, 0x30	; 48
 128:	88 b9       	out	0x08, r24	; 8
 12a:	42 9a       	sbi	0x08, 2	; 8
 12c:	ef ef       	ldi	r30, 0xFF	; 255
 12e:	f7 e4       	ldi	r31, 0x47	; 71
 130:	31 97       	sbiw	r30, 0x01	; 1
 132:	f1 f7       	brne	.-4      	; 0x130 <lcd_set_4bit+0x18>
 134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_set_4bit+0x1e>
 136:	00 00       	nop
 138:	42 98       	cbi	0x08, 2	; 8
 13a:	e6 e6       	ldi	r30, 0x66	; 102
 13c:	fe e0       	ldi	r31, 0x0E	; 14
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <lcd_set_4bit+0x26>
 142:	00 00       	nop
 144:	40 98       	cbi	0x08, 0	; 8
 146:	41 98       	cbi	0x08, 1	; 8
 148:	88 b9       	out	0x08, r24	; 8
 14a:	42 9a       	sbi	0x08, 2	; 8
 14c:	ef ef       	ldi	r30, 0xFF	; 255
 14e:	f7 e4       	ldi	r31, 0x47	; 71
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <lcd_set_4bit+0x38>
 154:	00 c0       	rjmp	.+0      	; 0x156 <lcd_set_4bit+0x3e>
 156:	00 00       	nop
 158:	42 98       	cbi	0x08, 2	; 8
 15a:	e6 e6       	ldi	r30, 0x66	; 102
 15c:	fe e0       	ldi	r31, 0x0E	; 14
 15e:	31 97       	sbiw	r30, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <lcd_set_4bit+0x46>
 162:	00 00       	nop
 164:	40 98       	cbi	0x08, 0	; 8
 166:	41 98       	cbi	0x08, 1	; 8
 168:	88 b9       	out	0x08, r24	; 8
 16a:	42 9a       	sbi	0x08, 2	; 8
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	97 e4       	ldi	r25, 0x47	; 71
 170:	01 97       	sbiw	r24, 0x01	; 1
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_set_4bit+0x58>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_set_4bit+0x5e>
 176:	00 00       	nop
 178:	42 98       	cbi	0x08, 2	; 8
 17a:	e6 e6       	ldi	r30, 0x66	; 102
 17c:	fe e0       	ldi	r31, 0x0E	; 14
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <lcd_set_4bit+0x66>
 182:	00 00       	nop
 184:	40 98       	cbi	0x08, 0	; 8
 186:	41 98       	cbi	0x08, 1	; 8
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	88 b9       	out	0x08, r24	; 8
 18c:	42 9a       	sbi	0x08, 2	; 8
 18e:	8f ef       	ldi	r24, 0xFF	; 255
 190:	97 e4       	ldi	r25, 0x47	; 71
 192:	01 97       	sbiw	r24, 0x01	; 1
 194:	f1 f7       	brne	.-4      	; 0x192 <lcd_set_4bit+0x7a>
 196:	00 c0       	rjmp	.+0      	; 0x198 <lcd_set_4bit+0x80>
 198:	00 00       	nop
 19a:	42 98       	cbi	0x08, 2	; 8
 19c:	08 95       	ret

0000019e <lcd_wr_command>:
 19e:	98 b1       	in	r25, 0x08	; 8
 1a0:	9f 70       	andi	r25, 0x0F	; 15
 1a2:	98 b9       	out	0x08, r25	; 8
 1a4:	98 b1       	in	r25, 0x08	; 8
 1a6:	28 2f       	mov	r18, r24
 1a8:	20 7f       	andi	r18, 0xF0	; 240
 1aa:	92 2b       	or	r25, r18
 1ac:	98 b9       	out	0x08, r25	; 8
 1ae:	40 98       	cbi	0x08, 0	; 8
 1b0:	41 98       	cbi	0x08, 1	; 8
 1b2:	42 9a       	sbi	0x08, 2	; 8
 1b4:	ef ef       	ldi	r30, 0xFF	; 255
 1b6:	f7 e4       	ldi	r31, 0x47	; 71
 1b8:	31 97       	sbiw	r30, 0x01	; 1
 1ba:	f1 f7       	brne	.-4      	; 0x1b8 <lcd_wr_command+0x1a>
 1bc:	00 c0       	rjmp	.+0      	; 0x1be <lcd_wr_command+0x20>
 1be:	00 00       	nop
 1c0:	42 98       	cbi	0x08, 2	; 8
 1c2:	98 b1       	in	r25, 0x08	; 8
 1c4:	9f 70       	andi	r25, 0x0F	; 15
 1c6:	98 b9       	out	0x08, r25	; 8
 1c8:	98 b1       	in	r25, 0x08	; 8
 1ca:	82 95       	swap	r24
 1cc:	80 7f       	andi	r24, 0xF0	; 240
 1ce:	89 2b       	or	r24, r25
 1d0:	88 b9       	out	0x08, r24	; 8
 1d2:	40 98       	cbi	0x08, 0	; 8
 1d4:	41 98       	cbi	0x08, 1	; 8
 1d6:	42 9a       	sbi	0x08, 2	; 8
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	97 e4       	ldi	r25, 0x47	; 71
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <lcd_wr_command+0x3e>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <lcd_wr_command+0x44>
 1e2:	00 00       	nop
 1e4:	42 98       	cbi	0x08, 2	; 8
 1e6:	08 95       	ret

000001e8 <lcd_init>:
 1e8:	97 df       	rcall	.-210    	; 0x118 <lcd_set_4bit>
 1ea:	86 e6       	ldi	r24, 0x66	; 102
 1ec:	9e e0       	ldi	r25, 0x0E	; 14
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <lcd_init+0x6>
 1f2:	00 00       	nop
 1f4:	88 e2       	ldi	r24, 0x28	; 40
 1f6:	d3 df       	rcall	.-90     	; 0x19e <lcd_wr_command>
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	d1 df       	rcall	.-94     	; 0x19e <lcd_wr_command>
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	cf df       	rcall	.-98     	; 0x19e <lcd_wr_command>
 200:	8e e0       	ldi	r24, 0x0E	; 14
 202:	cd df       	rcall	.-102    	; 0x19e <lcd_wr_command>
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	cb cf       	rjmp	.-106    	; 0x19e <lcd_wr_command>
 208:	08 95       	ret

0000020a <lcd_wr_char>:
 20a:	98 b1       	in	r25, 0x08	; 8
 20c:	9f 70       	andi	r25, 0x0F	; 15
 20e:	98 b9       	out	0x08, r25	; 8
 210:	98 b1       	in	r25, 0x08	; 8
 212:	28 2f       	mov	r18, r24
 214:	20 7f       	andi	r18, 0xF0	; 240
 216:	92 2b       	or	r25, r18
 218:	98 b9       	out	0x08, r25	; 8
 21a:	40 9a       	sbi	0x08, 0	; 8
 21c:	41 98       	cbi	0x08, 1	; 8
 21e:	42 9a       	sbi	0x08, 2	; 8
 220:	ef ef       	ldi	r30, 0xFF	; 255
 222:	f7 e4       	ldi	r31, 0x47	; 71
 224:	31 97       	sbiw	r30, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <lcd_wr_char+0x1a>
 228:	00 c0       	rjmp	.+0      	; 0x22a <lcd_wr_char+0x20>
 22a:	00 00       	nop
 22c:	42 98       	cbi	0x08, 2	; 8
 22e:	98 b1       	in	r25, 0x08	; 8
 230:	9f 70       	andi	r25, 0x0F	; 15
 232:	98 b9       	out	0x08, r25	; 8
 234:	98 b1       	in	r25, 0x08	; 8
 236:	82 95       	swap	r24
 238:	80 7f       	andi	r24, 0xF0	; 240
 23a:	89 2b       	or	r24, r25
 23c:	88 b9       	out	0x08, r24	; 8
 23e:	40 9a       	sbi	0x08, 0	; 8
 240:	41 98       	cbi	0x08, 1	; 8
 242:	42 9a       	sbi	0x08, 2	; 8
 244:	8f ef       	ldi	r24, 0xFF	; 255
 246:	97 e4       	ldi	r25, 0x47	; 71
 248:	01 97       	sbiw	r24, 0x01	; 1
 24a:	f1 f7       	brne	.-4      	; 0x248 <lcd_wr_char+0x3e>
 24c:	00 c0       	rjmp	.+0      	; 0x24e <lcd_wr_char+0x44>
 24e:	00 00       	nop
 250:	42 98       	cbi	0x08, 2	; 8
 252:	08 95       	ret

00000254 <lcd_home>:
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	a3 cf       	rjmp	.-186    	; 0x19e <lcd_wr_command>
 258:	08 95       	ret

0000025a <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
	switch (row) {
 25a:	82 30       	cpi	r24, 0x02	; 2
 25c:	69 f0       	breq	.+26     	; 0x278 <lcd_cursor+0x1e>
 25e:	18 f4       	brcc	.+6      	; 0x266 <lcd_cursor+0xc>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	31 f0       	breq	.+12     	; 0x270 <lcd_cursor+0x16>
 264:	08 95       	ret
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	59 f0       	breq	.+22     	; 0x280 <lcd_cursor+0x26>
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	69 f0       	breq	.+26     	; 0x288 <lcd_cursor+0x2e>
 26e:	08 95       	ret
		case 1: lcd_wr_command (0x80 + column - 1); break;
 270:	8f e7       	ldi	r24, 0x7F	; 127
 272:	86 0f       	add	r24, r22
 274:	94 cf       	rjmp	.-216    	; 0x19e <lcd_wr_command>
 276:	08 95       	ret
		case 2: lcd_wr_command (0xc0 + column - 1); break;
 278:	8f eb       	ldi	r24, 0xBF	; 191
 27a:	86 0f       	add	r24, r22
 27c:	90 cf       	rjmp	.-224    	; 0x19e <lcd_wr_command>
 27e:	08 95       	ret
		case 3: lcd_wr_command (0x94 + column - 1); break;
 280:	83 e9       	ldi	r24, 0x93	; 147
 282:	86 0f       	add	r24, r22
 284:	8c cf       	rjmp	.-232    	; 0x19e <lcd_wr_command>
 286:	08 95       	ret
		case 4: lcd_wr_command (0xd4 + column - 1); break;
 288:	83 ed       	ldi	r24, 0xD3	; 211
 28a:	86 0f       	add	r24, r22
 28c:	88 cf       	rjmp	.-240    	; 0x19e <lcd_wr_command>
 28e:	08 95       	ret

00000290 <lcd_print>:
 290:	0f 93       	push	r16
	}
}

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	8a 01       	movw	r16, r20
 29a:	e9 01       	movw	r28, r18
	unsigned char flag=0;
	if(row==0||coloumn==0)
 29c:	88 23       	and	r24, r24
 29e:	11 f0       	breq	.+4      	; 0x2a4 <lcd_print+0x14>
 2a0:	61 11       	cpse	r22, r1
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <lcd_print+0x18>
	{
		lcd_home();
 2a4:	d7 df       	rcall	.-82     	; 0x254 <lcd_home>
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <lcd_print+0x1a>
	}
	else
	{
		lcd_cursor(row,coloumn);
 2a8:	d8 df       	rcall	.-80     	; 0x25a <lcd_cursor>
 2aa:	c5 30       	cpi	r28, 0x05	; 5
	}
	if(digits==5 || flag==1)
 2ac:	d1 05       	cpc	r29, r1
 2ae:	09 f0       	breq	.+2      	; 0x2b2 <lcd_print+0x22>
 2b0:	d1 c0       	rjmp	.+418    	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 2b2:	98 01       	movw	r18, r16
	{
		million=value/10000+48;
 2b4:	32 95       	swap	r19
 2b6:	22 95       	swap	r18
 2b8:	2f 70       	andi	r18, 0x0F	; 15
 2ba:	23 27       	eor	r18, r19
 2bc:	3f 70       	andi	r19, 0x0F	; 15
 2be:	23 27       	eor	r18, r19
 2c0:	a7 e4       	ldi	r26, 0x47	; 71
 2c2:	b3 e0       	ldi	r27, 0x03	; 3
 2c4:	e6 d1       	rcall	.+972    	; 0x692 <__umulhisi3>
 2c6:	96 95       	lsr	r25
 2c8:	87 95       	ror	r24
 2ca:	96 95       	lsr	r25
 2cc:	87 95       	ror	r24
 2ce:	96 95       	lsr	r25
 2d0:	87 95       	ror	r24
 2d2:	c0 96       	adiw	r24, 0x30	; 48
 2d4:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <million+0x1>
 2d8:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <million>
		lcd_wr_char(million);
 2dc:	96 df       	rcall	.-212    	; 0x20a <lcd_wr_char>
 2de:	98 01       	movw	r18, r16
		flag=1;
	}
	if(digits==4 || flag==1)
	{
		temp = value/1000;
 2e0:	36 95       	lsr	r19
 2e2:	27 95       	ror	r18
 2e4:	36 95       	lsr	r19
 2e6:	27 95       	ror	r18
 2e8:	36 95       	lsr	r19
 2ea:	27 95       	ror	r18
 2ec:	a5 ec       	ldi	r26, 0xC5	; 197
 2ee:	b0 e2       	ldi	r27, 0x20	; 32
 2f0:	d0 d1       	rcall	.+928    	; 0x692 <__umulhisi3>
 2f2:	ac 01       	movw	r20, r24
 2f4:	52 95       	swap	r21
 2f6:	42 95       	swap	r20
 2f8:	4f 70       	andi	r20, 0x0F	; 15
 2fa:	45 27       	eor	r20, r21
 2fc:	5f 70       	andi	r21, 0x0F	; 15
 2fe:	45 27       	eor	r20, r21
 300:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <temp+0x1>
 304:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <temp>
		thousand = temp%10 + 48;
 308:	9a 01       	movw	r18, r20
 30a:	ad ec       	ldi	r26, 0xCD	; 205
 30c:	bc ec       	ldi	r27, 0xCC	; 204
 30e:	c1 d1       	rcall	.+898    	; 0x692 <__umulhisi3>
 310:	96 95       	lsr	r25
 312:	87 95       	ror	r24
 314:	96 95       	lsr	r25
 316:	87 95       	ror	r24
 318:	96 95       	lsr	r25
 31a:	87 95       	ror	r24
 31c:	9c 01       	movw	r18, r24
 31e:	22 0f       	add	r18, r18
 320:	33 1f       	adc	r19, r19
 322:	88 0f       	add	r24, r24
 324:	99 1f       	adc	r25, r25
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	88 0f       	add	r24, r24
 32c:	99 1f       	adc	r25, r25
 32e:	82 0f       	add	r24, r18
 330:	93 1f       	adc	r25, r19
 332:	9a 01       	movw	r18, r20
 334:	28 1b       	sub	r18, r24
 336:	39 0b       	sbc	r19, r25
 338:	c9 01       	movw	r24, r18
 33a:	c0 96       	adiw	r24, 0x30	; 48
 33c:	90 93 15 02 	sts	0x0215, r25	; 0x800215 <thousand+0x1>
 340:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <thousand>
		lcd_wr_char(thousand);
 344:	62 df       	rcall	.-316    	; 0x20a <lcd_wr_char>
 346:	03 c0       	rjmp	.+6      	; 0x34e <lcd_print+0xbe>
 348:	c3 30       	cpi	r28, 0x03	; 3
		flag=1;
	}
	if(digits==3 || flag==1)
 34a:	d1 05       	cpc	r29, r1
 34c:	79 f5       	brne	.+94     	; 0x3ac <lcd_print+0x11c>
 34e:	98 01       	movw	r18, r16
	{
		temp = value/100;
 350:	36 95       	lsr	r19
 352:	27 95       	ror	r18
 354:	36 95       	lsr	r19
 356:	27 95       	ror	r18
 358:	ab e7       	ldi	r26, 0x7B	; 123
 35a:	b4 e1       	ldi	r27, 0x14	; 20
 35c:	9a d1       	rcall	.+820    	; 0x692 <__umulhisi3>
 35e:	ac 01       	movw	r20, r24
 360:	56 95       	lsr	r21
 362:	47 95       	ror	r20
 364:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <temp+0x1>
 368:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <temp>
		hundred = temp%10 + 48;
 36c:	9a 01       	movw	r18, r20
 36e:	ad ec       	ldi	r26, 0xCD	; 205
 370:	bc ec       	ldi	r27, 0xCC	; 204
 372:	8f d1       	rcall	.+798    	; 0x692 <__umulhisi3>
 374:	96 95       	lsr	r25
 376:	87 95       	ror	r24
 378:	96 95       	lsr	r25
 37a:	87 95       	ror	r24
 37c:	96 95       	lsr	r25
 37e:	87 95       	ror	r24
 380:	9c 01       	movw	r18, r24
 382:	22 0f       	add	r18, r18
 384:	33 1f       	adc	r19, r19
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	88 0f       	add	r24, r24
 390:	99 1f       	adc	r25, r25
 392:	82 0f       	add	r24, r18
 394:	93 1f       	adc	r25, r19
 396:	9a 01       	movw	r18, r20
 398:	28 1b       	sub	r18, r24
 39a:	39 0b       	sbc	r19, r25
 39c:	c9 01       	movw	r24, r18
 39e:	c0 96       	adiw	r24, 0x30	; 48
 3a0:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <hundred+0x1>
 3a4:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <hundred>
		lcd_wr_char(hundred);
 3a8:	30 df       	rcall	.-416    	; 0x20a <lcd_wr_char>
 3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <lcd_print+0x124>
		flag=1;
	}
	if(digits==2 || flag==1)
 3ac:	c2 30       	cpi	r28, 0x02	; 2
 3ae:	d1 05       	cpc	r29, r1
 3b0:	09 f0       	breq	.+2      	; 0x3b4 <lcd_print+0x124>
 3b2:	55 c0       	rjmp	.+170    	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
	{
		temp = value/10;
 3b4:	98 01       	movw	r18, r16
 3b6:	ad ec       	ldi	r26, 0xCD	; 205
 3b8:	bc ec       	ldi	r27, 0xCC	; 204
 3ba:	6b d1       	rcall	.+726    	; 0x692 <__umulhisi3>
 3bc:	ac 01       	movw	r20, r24
 3be:	56 95       	lsr	r21
 3c0:	47 95       	ror	r20
 3c2:	56 95       	lsr	r21
 3c4:	47 95       	ror	r20
 3c6:	56 95       	lsr	r21
 3c8:	47 95       	ror	r20
 3ca:	50 93 07 02 	sts	0x0207, r21	; 0x800207 <temp+0x1>
 3ce:	40 93 06 02 	sts	0x0206, r20	; 0x800206 <temp>
		tens = temp%10 + 48;
 3d2:	9a 01       	movw	r18, r20
 3d4:	5e d1       	rcall	.+700    	; 0x692 <__umulhisi3>
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	9c 01       	movw	r18, r24
 3e4:	22 0f       	add	r18, r18
 3e6:	33 1f       	adc	r19, r19
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	82 0f       	add	r24, r18
 3f6:	93 1f       	adc	r25, r19
 3f8:	9a 01       	movw	r18, r20
 3fa:	28 1b       	sub	r18, r24
 3fc:	39 0b       	sbc	r19, r25
 3fe:	c9 01       	movw	r24, r18
 400:	c0 96       	adiw	r24, 0x30	; 48
 402:	90 93 0b 02 	sts	0x020B, r25	; 0x80020b <tens+0x1>
 406:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <tens>
		lcd_wr_char(tens);
 40a:	ff de       	rcall	.-514    	; 0x20a <lcd_wr_char>
		flag=1;
	}
	if(digits==1 || flag==1)
	{
		unit = value%10 + 48;
 40c:	98 01       	movw	r18, r16
 40e:	ad ec       	ldi	r26, 0xCD	; 205
 410:	bc ec       	ldi	r27, 0xCC	; 204
 412:	3f d1       	rcall	.+638    	; 0x692 <__umulhisi3>
 414:	96 95       	lsr	r25
 416:	87 95       	ror	r24
 418:	96 95       	lsr	r25
 41a:	87 95       	ror	r24
 41c:	96 95       	lsr	r25
 41e:	87 95       	ror	r24
 420:	9c 01       	movw	r18, r24
 422:	22 0f       	add	r18, r18
 424:	33 1f       	adc	r19, r19
 426:	88 0f       	add	r24, r24
 428:	99 1f       	adc	r25, r25
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	82 0f       	add	r24, r18
 434:	93 1f       	adc	r25, r19
 436:	98 01       	movw	r18, r16
 438:	28 1b       	sub	r18, r24
 43a:	39 0b       	sbc	r19, r25
 43c:	c9 01       	movw	r24, r18
 43e:	c0 96       	adiw	r24, 0x30	; 48
 440:	90 93 13 02 	sts	0x0213, r25	; 0x800213 <unit+0x1>
 444:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <unit>
		lcd_wr_char(unit);
 448:	e0 de       	rcall	.-576    	; 0x20a <lcd_wr_char>
	}
	if(digits>5)
 44a:	26 97       	sbiw	r28, 0x06	; 6
 44c:	64 f0       	brlt	.+24     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	{
		lcd_wr_char('E');
 44e:	85 e4       	ldi	r24, 0x45	; 69
 450:	dc de       	rcall	.-584    	; 0x20a <lcd_wr_char>
 452:	09 c0       	rjmp	.+18     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
	}
	
}
 454:	c4 30       	cpi	r28, 0x04	; 4
	{
		million=value/10000+48;
		lcd_wr_char(million);
		flag=1;
	}
	if(digits==4 || flag==1)
 456:	d1 05       	cpc	r29, r1
 458:	09 f0       	breq	.+2      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 45a:	76 cf       	rjmp	.-276    	; 0x348 <lcd_print+0xb8>
 45c:	40 cf       	rjmp	.-384    	; 0x2de <lcd_print+0x4e>
 45e:	c1 30       	cpi	r28, 0x01	; 1
		temp = value/10;
		tens = temp%10 + 48;
		lcd_wr_char(tens);
		flag=1;
	}
	if(digits==1 || flag==1)
 460:	d1 05       	cpc	r29, r1
 462:	99 f7       	brne	.-26     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 464:	d3 cf       	rjmp	.-90     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 466:	df 91       	pop	r29
	if(digits>5)
	{
		lcd_wr_char('E');
	}
	
}
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <port_init>:
 470:	10 ba       	out	0x10, r1	; 16
}

void port_init()
{
	DDRF =0x00;
	PORTF=0x00;
 472:	11 ba       	out	0x11, r1	; 17
	DDRA |=0x0F;
 474:	81 b1       	in	r24, 0x01	; 1
 476:	8f 60       	ori	r24, 0x0F	; 15
 478:	81 b9       	out	0x01, r24	; 1
	PORTA &=0xF0;
 47a:	82 b1       	in	r24, 0x02	; 2
 47c:	80 7f       	andi	r24, 0xF0	; 240
 47e:	82 b9       	out	0x02, r24	; 2
	DDRL |=0x18;
 480:	ea e0       	ldi	r30, 0x0A	; 10
 482:	f1 e0       	ldi	r31, 0x01	; 1
 484:	80 81       	ld	r24, Z
 486:	88 61       	ori	r24, 0x18	; 24
 488:	80 83       	st	Z, r24
 48a:	08 95       	ret

0000048c <fwd>:
}

void fwd()
{
	PORTA &=0xF0;
 48c:	82 b1       	in	r24, 0x02	; 2
 48e:	80 7f       	andi	r24, 0xF0	; 240
 490:	82 b9       	out	0x02, r24	; 2
	PORTA |=0x06;
 492:	82 b1       	in	r24, 0x02	; 2
 494:	86 60       	ori	r24, 0x06	; 6
 496:	82 b9       	out	0x02, r24	; 2
	OCR5A =255;
 498:	8f ef       	ldi	r24, 0xFF	; 255
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 4a0:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5B =230;
 4a4:	86 ee       	ldi	r24, 0xE6	; 230
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 4ac:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 4b0:	08 95       	ret

000004b2 <fwd_left>:
}
void fwd_left()
{
	PORTA &=0xF0;
 4b2:	82 b1       	in	r24, 0x02	; 2
 4b4:	80 7f       	andi	r24, 0xF0	; 240
 4b6:	82 b9       	out	0x02, r24	; 2
	PORTA |=0x06;
 4b8:	82 b1       	in	r24, 0x02	; 2
 4ba:	86 60       	ori	r24, 0x06	; 6
 4bc:	82 b9       	out	0x02, r24	; 2
	OCR5A =150;
 4be:	86 e9       	ldi	r24, 0x96	; 150
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 4c6:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5B =220;
 4ca:	8c ed       	ldi	r24, 0xDC	; 220
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 4d2:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 4d6:	08 95       	ret

000004d8 <fwd_right>:
}

void fwd_right()
{
	PORTA &=0xF0;
 4d8:	82 b1       	in	r24, 0x02	; 2
 4da:	80 7f       	andi	r24, 0xF0	; 240
 4dc:	82 b9       	out	0x02, r24	; 2
	PORTA |=0x06;
 4de:	82 b1       	in	r24, 0x02	; 2
 4e0:	86 60       	ori	r24, 0x06	; 6
 4e2:	82 b9       	out	0x02, r24	; 2
	OCR5A =235;
 4e4:	8b ee       	ldi	r24, 0xEB	; 235
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x700129>
 4ec:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x700128>
	OCR5B=150;
 4f0:	86 e9       	ldi	r24, 0x96	; 150
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <__TEXT_REGION_LENGTH__+0x70012b>
 4f8:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <__TEXT_REGION_LENGTH__+0x70012a>
 4fc:	08 95       	ret

000004fe <stop>:
}
void stop()
{
	PORTA &=0xF0;
 4fe:	82 b1       	in	r24, 0x02	; 2
 500:	80 7f       	andi	r24, 0xF0	; 240
 502:	82 b9       	out	0x02, r24	; 2
	PORTA |= 0x00;
 504:	82 b1       	in	r24, 0x02	; 2
 506:	82 b9       	out	0x02, r24	; 2
 508:	08 95       	ret

0000050a <timer_init>:
}

void timer_init()
{
	TCCR5A |=(1<<WGM50)|(1<<COM5A1)|(1<<COM5B1);
 50a:	e0 e2       	ldi	r30, 0x20	; 32
 50c:	f1 e0       	ldi	r31, 0x01	; 1
 50e:	80 81       	ld	r24, Z
 510:	81 6a       	ori	r24, 0xA1	; 161
 512:	80 83       	st	Z, r24
	TCCR5B |=(1<<WGM52)|(1<<CS50)|(1<<CS52);
 514:	e1 e2       	ldi	r30, 0x21	; 33
 516:	f1 e0       	ldi	r31, 0x01	; 1
 518:	80 81       	ld	r24, Z
 51a:	8d 60       	ori	r24, 0x0D	; 13
 51c:	80 83       	st	Z, r24
 51e:	08 95       	ret

00000520 <adc_init>:
}

void adc_init()
{
	ADMUX|=(1<<REFS0);//ref is equal to vcc
 520:	ec e7       	ldi	r30, 0x7C	; 124
 522:	f0 e0       	ldi	r31, 0x00	; 0
 524:	80 81       	ld	r24, Z
 526:	80 64       	ori	r24, 0x40	; 64
 528:	80 83       	st	Z, r24
	ADCSRA|=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//prescaler 128
 52a:	ea e7       	ldi	r30, 0x7A	; 122
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	80 81       	ld	r24, Z
 530:	87 68       	ori	r24, 0x87	; 135
 532:	80 83       	st	Z, r24
 534:	08 95       	ret

00000536 <ADC_Conversion>:
}

unsigned char ADC_Conversion(unsigned char Ch)
{
	unsigned char a;
	if(Ch>7)
 536:	88 30       	cpi	r24, 0x08	; 8
 538:	18 f0       	brcs	.+6      	; 0x540 <ADC_Conversion+0xa>
	{
		ADCSRB = 0x08;
 53a:	98 e0       	ldi	r25, 0x08	; 8
 53c:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	}
	Ch = Ch & 0x07;
	ADMUX= 0x20 | Ch;
 540:	87 70       	andi	r24, 0x07	; 7
 542:	80 62       	ori	r24, 0x20	; 32
 544:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x70007c>
	
	ADCSRA = ADCSRA | 0x40; //Set start conversion bit
 548:	ea e7       	ldi	r30, 0x7A	; 122
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	80 81       	ld	r24, Z
 54e:	80 64       	ori	r24, 0x40	; 64
 550:	80 83       	st	Z, r24
	while((ADCSRA&0x10)==0); //Wait for ADC conversion to complete
 552:	80 81       	ld	r24, Z
 554:	84 ff       	sbrs	r24, 4
 556:	fd cf       	rjmp	.-6      	; 0x552 <ADC_Conversion+0x1c>
	a=ADCH;
 558:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x700079>
	ADCSRA = ADCSRA|0x10; //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 55c:	ea e7       	ldi	r30, 0x7A	; 122
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	90 81       	ld	r25, Z
 562:	90 61       	ori	r25, 0x10	; 16
 564:	90 83       	st	Z, r25
	ADCSRB = 0x00;
 566:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x70007b>
	return a;
}
 56a:	08 95       	ret

0000056c <linefollow>:

void linefollow()
{
	if(b<15 && a>=25 && c>=25)
 56c:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <b>
 570:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <b+0x1>
 574:	8f 30       	cpi	r24, 0x0F	; 15
 576:	91 05       	cpc	r25, r1
 578:	84 f4       	brge	.+32     	; 0x59a <linefollow+0x2e>
 57a:	20 91 10 02 	lds	r18, 0x0210	; 0x800210 <a>
 57e:	30 91 11 02 	lds	r19, 0x0211	; 0x800211 <a+0x1>
 582:	29 31       	cpi	r18, 0x19	; 25
 584:	31 05       	cpc	r19, r1
 586:	4c f0       	brlt	.+18     	; 0x59a <linefollow+0x2e>
 588:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <c>
 58c:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <c+0x1>
 590:	29 31       	cpi	r18, 0x19	; 25
 592:	31 05       	cpc	r19, r1
 594:	14 f0       	brlt	.+4      	; 0x59a <linefollow+0x2e>
	{
		fwd();
 596:	7a cf       	rjmp	.-268    	; 0x48c <fwd>
 598:	08 95       	ret
	}
	else if (c<15)
 59a:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <c>
 59e:	30 91 09 02 	lds	r19, 0x0209	; 0x800209 <c+0x1>
 5a2:	2f 30       	cpi	r18, 0x0F	; 15
 5a4:	31 05       	cpc	r19, r1
	{
		fwd_left();
 5a6:	14 f4       	brge	.+4      	; 0x5ac <linefollow+0x40>
 5a8:	84 cf       	rjmp	.-248    	; 0x4b2 <fwd_left>
 5aa:	08 95       	ret
	}
	else if (a<15 )
 5ac:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <a>
 5b0:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <a+0x1>
 5b4:	4f 30       	cpi	r20, 0x0F	; 15
 5b6:	51 05       	cpc	r21, r1
	{
		fwd_right();
 5b8:	14 f4       	brge	.+4      	; 0x5be <linefollow+0x52>
 5ba:	8e cf       	rjmp	.-228    	; 0x4d8 <fwd_right>
 5bc:	08 95       	ret
	}
	else if (a>25 && b>25 && c>25)
 5be:	4a 31       	cpi	r20, 0x1A	; 26
 5c0:	51 05       	cpc	r21, r1
 5c2:	34 f0       	brlt	.+12     	; 0x5d0 <linefollow+0x64>
 5c4:	4a 97       	sbiw	r24, 0x1a	; 26
 5c6:	24 f0       	brlt	.+8      	; 0x5d0 <linefollow+0x64>
 5c8:	2a 31       	cpi	r18, 0x1A	; 26
 5ca:	31 05       	cpc	r19, r1
	{
		stop();
 5cc:	0c f0       	brlt	.+2      	; 0x5d0 <linefollow+0x64>
 5ce:	97 cf       	rjmp	.-210    	; 0x4fe <stop>
 5d0:	08 95       	ret

000005d2 <readprint>:
	}
}

void readprint()
{
		a=ADC_Conversion(1);
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	b0 df       	rcall	.-160    	; 0x536 <ADC_Conversion>
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <a+0x1>
 5dc:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <a>
		b=ADC_Conversion(2);
 5e0:	82 e0       	ldi	r24, 0x02	; 2
 5e2:	a9 df       	rcall	.-174    	; 0x536 <ADC_Conversion>
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <b+0x1>
 5ea:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <b>
		c=ADC_Conversion(3);
 5ee:	83 e0       	ldi	r24, 0x03	; 3
 5f0:	a2 df       	rcall	.-188    	; 0x536 <ADC_Conversion>
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <c+0x1>
 5f8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <c>
		d=ADC_Conversion(5);
 5fc:	85 e0       	ldi	r24, 0x05	; 5
 5fe:	9b df       	rcall	.-202    	; 0x536 <ADC_Conversion>
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	90 93 0d 02 	sts	0x020D, r25	; 0x80020d <d+0x1>
 606:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <d>
 60a:	40 91 08 02 	lds	r20, 0x0208	; 0x800208 <c>
		lcd_print(1,1,c,3);
 60e:	50 91 09 02 	lds	r21, 0x0209	; 0x800209 <c+0x1>
 612:	23 e0       	ldi	r18, 0x03	; 3
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	61 e0       	ldi	r22, 0x01	; 1
 618:	81 e0       	ldi	r24, 0x01	; 1
 61a:	3a de       	rcall	.-908    	; 0x290 <lcd_print>
 61c:	40 91 02 02 	lds	r20, 0x0202	; 0x800202 <b>
		lcd_print(1,5,b,3);
 620:	50 91 03 02 	lds	r21, 0x0203	; 0x800203 <b+0x1>
 624:	23 e0       	ldi	r18, 0x03	; 3
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	65 e0       	ldi	r22, 0x05	; 5
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	31 de       	rcall	.-926    	; 0x290 <lcd_print>
 62e:	40 91 10 02 	lds	r20, 0x0210	; 0x800210 <a>
		lcd_print(1,9,a,3);
 632:	50 91 11 02 	lds	r21, 0x0211	; 0x800211 <a+0x1>
 636:	23 e0       	ldi	r18, 0x03	; 3
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	69 e0       	ldi	r22, 0x09	; 9
 63c:	81 e0       	ldi	r24, 0x01	; 1
 63e:	28 de       	rcall	.-944    	; 0x290 <lcd_print>
 640:	40 91 0c 02 	lds	r20, 0x020C	; 0x80020c <d>
		lcd_print(2,1,d,3);
 644:	50 91 0d 02 	lds	r21, 0x020D	; 0x80020d <d+0x1>
 648:	23 e0       	ldi	r18, 0x03	; 3
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	82 e0       	ldi	r24, 0x02	; 2
 650:	1f ce       	rjmp	.-962    	; 0x290 <lcd_print>
 652:	08 95       	ret

00000654 <main>:
 654:	0d df       	rcall	.-486    	; 0x470 <port_init>
void readprint();

int main(void)
{
	port_init();
	adc_init();
 656:	64 df       	rcall	.-312    	; 0x520 <adc_init>
	init_ports();
 658:	58 dd       	rcall	.-1360   	; 0x10a <init_ports>
	lcd_init();
 65a:	c6 dd       	rcall	.-1140   	; 0x1e8 <lcd_init>
	timer_init();
 65c:	56 df       	rcall	.-340    	; 0x50a <timer_init>
 65e:	c1 e0       	ldi	r28, 0x01	; 1
		switch (s_mode)
		{
			case 0: 
			if (d<70)
			{
				s_mode=1;
 660:	d0 e0       	ldi	r29, 0x00	; 0
 662:	b7 df       	rcall	.-146    	; 0x5d2 <readprint>
	lcd_init();
	timer_init();
    
    while (1) 
    { 
		readprint();
 664:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <_edata>
		switch (s_mode)
 668:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <_edata+0x1>
 66c:	00 97       	sbiw	r24, 0x00	; 0
 66e:	19 f0       	breq	.+6      	; 0x676 <main+0x22>
 670:	01 97       	sbiw	r24, 0x01	; 1
 672:	69 f0       	breq	.+26     	; 0x68e <main+0x3a>
 674:	f6 cf       	rjmp	.-20     	; 0x662 <main+0xe>
 676:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <d>
		{
			case 0: 
			if (d<70)
 67a:	90 91 0d 02 	lds	r25, 0x020D	; 0x80020d <d+0x1>
 67e:	86 34       	cpi	r24, 0x46	; 70
 680:	91 05       	cpc	r25, r1
 682:	7c f7       	brge	.-34     	; 0x662 <main+0xe>
 684:	d0 93 01 02 	sts	0x0201, r29	; 0x800201 <_edata+0x1>
			{
				s_mode=1;
 688:	c0 93 00 02 	sts	0x0200, r28	; 0x800200 <_edata>
 68c:	ea cf       	rjmp	.-44     	; 0x662 <main+0xe>
 68e:	6e df       	rcall	.-292    	; 0x56c <linefollow>
			}
			break;
			case 1:
			linefollow();
 690:	e8 cf       	rjmp	.-48     	; 0x662 <main+0xe>

00000692 <__umulhisi3>:
 692:	a2 9f       	mul	r26, r18
			break;
 694:	b0 01       	movw	r22, r0
 696:	b3 9f       	mul	r27, r19
 698:	c0 01       	movw	r24, r0
 69a:	a3 9f       	mul	r26, r19
 69c:	70 0d       	add	r23, r0
 69e:	81 1d       	adc	r24, r1
 6a0:	11 24       	eor	r1, r1
 6a2:	91 1d       	adc	r25, r1
 6a4:	b2 9f       	mul	r27, r18
 6a6:	70 0d       	add	r23, r0
 6a8:	81 1d       	adc	r24, r1
 6aa:	11 24       	eor	r1, r1
 6ac:	91 1d       	adc	r25, r1
 6ae:	08 95       	ret

000006b0 <_exit>:
 6b0:	f8 94       	cli

000006b2 <__stop_program>:
 6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <__stop_program>
